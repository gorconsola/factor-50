-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.Subscription exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Hasura.Enum.Projects_select_column
import Hasura.InputObject
import Hasura.Interface
import Hasura.Object
import Hasura.Scalar
import Hasura.ScalarCodecs
import Hasura.Union
import Json.Decode as Decode exposing (Decoder)


type alias ProjectsOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Projects_select_column.Projects_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Projects_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Projects_bool_exp
    }


{-| fetch data from the table: "Projects"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
projects :
    (ProjectsOptionalArguments -> ProjectsOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Projects
    -> SelectionSet (List decodesTo) RootSubscription
projects fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Projects_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeProjects_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeProjects_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "Projects" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ProjectsAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Hasura.Enum.Projects_select_column.Projects_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Hasura.InputObject.Projects_order_by)
    , where_ : OptionalArgument Hasura.InputObject.Projects_bool_exp
    }


{-| fetch aggregated fields from the table: "Projects"

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
projects_aggregate :
    (ProjectsAggregateOptionalArguments -> ProjectsAggregateOptionalArguments)
    -> SelectionSet decodesTo Hasura.Object.Projects_aggregate
    -> SelectionSet decodesTo RootSubscription
projects_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Hasura.Enum.Projects_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Hasura.InputObject.encodeProjects_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeProjects_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "Projects_aggregate" optionalArgs____ object____ Basics.identity


type alias ProjectsByPkRequiredArguments =
    { id : Int }


{-| fetch data from the table: "Projects" using primary key columns
-}
projects_by_pk :
    ProjectsByPkRequiredArguments
    -> SelectionSet decodesTo Hasura.Object.Projects
    -> SelectionSet (Maybe decodesTo) RootSubscription
projects_by_pk requiredArgs____ object____ =
    Object.selectionForCompositeField "Projects_by_pk" [ Argument.required "id" requiredArgs____.id Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectsStreamOptionalArguments =
    { where_ : OptionalArgument Hasura.InputObject.Projects_bool_exp }


type alias ProjectsStreamRequiredArguments =
    { batch_size : Int
    , cursor : List (Maybe Hasura.InputObject.Projects_stream_cursor_input)
    }


{-| fetch data from the table in a streaming manner : "Projects"

  - batch\_size - maximum number of rows returned in a single batch
  - cursor - cursor to stream the results returned by the query
  - where\_ - filter the rows returned

-}
projects_stream :
    (ProjectsStreamOptionalArguments -> ProjectsStreamOptionalArguments)
    -> ProjectsStreamRequiredArguments
    -> SelectionSet decodesTo Hasura.Object.Projects
    -> SelectionSet (List decodesTo) RootSubscription
projects_stream fillInOptionals____ requiredArgs____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "where" filledInOptionals____.where_ Hasura.InputObject.encodeProjects_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "Projects_stream" (optionalArgs____ ++ [ Argument.required "batch_size" requiredArgs____.batch_size Encode.int, Argument.required "cursor" requiredArgs____.cursor (Hasura.InputObject.encodeProjects_stream_cursor_input |> Encode.maybe |> Encode.list) ]) object____ (Basics.identity >> Decode.list)
