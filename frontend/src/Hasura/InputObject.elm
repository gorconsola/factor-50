-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Hasura.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Hasura.Enum.Cursor_ordering
import Hasura.Enum.Order_by
import Hasura.Enum.Projects_constraint
import Hasura.Enum.Projects_update_column
import Hasura.Interface
import Hasura.Object
import Hasura.Scalar
import Hasura.ScalarCodecs
import Hasura.Union
import Json.Decode as Decode


buildInt_comparison_exp :
    (Int_comparison_expOptionalFields -> Int_comparison_expOptionalFields)
    -> Int_comparison_exp
buildInt_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, in_ = Absent, is_null_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nin_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, in_ = optionals____.in_, is_null_ = optionals____.is_null_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nin_ = optionals____.nin_ }


type alias Int_comparison_expOptionalFields =
    { eq_ : OptionalArgument Int
    , gt_ : OptionalArgument Int
    , gte_ : OptionalArgument Int
    , in_ : OptionalArgument (List Int)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Int
    , lte_ : OptionalArgument Int
    , neq_ : OptionalArgument Int
    , nin_ : OptionalArgument (List Int)
    }


{-| Type for the Int\_comparison\_exp input object.
-}
type alias Int_comparison_exp =
    { eq_ : OptionalArgument Int
    , gt_ : OptionalArgument Int
    , gte_ : OptionalArgument Int
    , in_ : OptionalArgument (List Int)
    , is_null_ : OptionalArgument Bool
    , lt_ : OptionalArgument Int
    , lte_ : OptionalArgument Int
    , neq_ : OptionalArgument Int
    , nin_ : OptionalArgument (List Int)
    }


{-| Encode a Int\_comparison\_exp into a value that can be used as an argument.
-}
encodeInt_comparison_exp : Int_comparison_exp -> Value
encodeInt_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", Encode.int |> Encode.optional input____.eq_ ), ( "_gt", Encode.int |> Encode.optional input____.gt_ ), ( "_gte", Encode.int |> Encode.optional input____.gte_ ), ( "_in", (Encode.int |> Encode.list) |> Encode.optional input____.in_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_lt", Encode.int |> Encode.optional input____.lt_ ), ( "_lte", Encode.int |> Encode.optional input____.lte_ ), ( "_neq", Encode.int |> Encode.optional input____.neq_ ), ( "_nin", (Encode.int |> Encode.list) |> Encode.optional input____.nin_ ) ]


buildProjects_bool_exp :
    (Projects_bool_expOptionalFields -> Projects_bool_expOptionalFields)
    -> Projects_bool_exp
buildProjects_bool_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { and_ = Absent, not_ = Absent, or_ = Absent, id = Absent, title = Absent }
    in
    Projects_bool_exp { and_ = optionals____.and_, not_ = optionals____.not_, or_ = optionals____.or_, id = optionals____.id, title = optionals____.title }


type alias Projects_bool_expOptionalFields =
    { and_ : OptionalArgument (List Projects_bool_exp)
    , not_ : OptionalArgument Projects_bool_exp
    , or_ : OptionalArgument (List Projects_bool_exp)
    , id : OptionalArgument Int_comparison_exp
    , title : OptionalArgument String_comparison_exp
    }


{-| Type alias for the `Projects_bool_exp` attributes. Note that this type
needs to use the `Projects_bool_exp` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Projects_bool_expRaw =
    { and_ : OptionalArgument (List Projects_bool_exp)
    , not_ : OptionalArgument Projects_bool_exp
    , or_ : OptionalArgument (List Projects_bool_exp)
    , id : OptionalArgument Int_comparison_exp
    , title : OptionalArgument String_comparison_exp
    }


{-| Type for the Projects\_bool\_exp input object.
-}
type Projects_bool_exp
    = Projects_bool_exp Projects_bool_expRaw


{-| Encode a Projects\_bool\_exp into a value that can be used as an argument.
-}
encodeProjects_bool_exp : Projects_bool_exp -> Value
encodeProjects_bool_exp (Projects_bool_exp input____) =
    Encode.maybeObject
        [ ( "_and", (encodeProjects_bool_exp |> Encode.list) |> Encode.optional input____.and_ ), ( "_not", encodeProjects_bool_exp |> Encode.optional input____.not_ ), ( "_or", (encodeProjects_bool_exp |> Encode.list) |> Encode.optional input____.or_ ), ( "id", encodeInt_comparison_exp |> Encode.optional input____.id ), ( "title", encodeString_comparison_exp |> Encode.optional input____.title ) ]


buildProjects_inc_input :
    (Projects_inc_inputOptionalFields -> Projects_inc_inputOptionalFields)
    -> Projects_inc_input
buildProjects_inc_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent }
    in
    { id = optionals____.id }


type alias Projects_inc_inputOptionalFields =
    { id : OptionalArgument Int }


{-| Type for the Projects\_inc\_input input object.
-}
type alias Projects_inc_input =
    { id : OptionalArgument Int }


{-| Encode a Projects\_inc\_input into a value that can be used as an argument.
-}
encodeProjects_inc_input : Projects_inc_input -> Value
encodeProjects_inc_input input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ) ]


buildProjects_insert_input :
    (Projects_insert_inputOptionalFields -> Projects_insert_inputOptionalFields)
    -> Projects_insert_input
buildProjects_insert_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, title = Absent }
    in
    { id = optionals____.id, title = optionals____.title }


type alias Projects_insert_inputOptionalFields =
    { id : OptionalArgument Int
    , title : OptionalArgument String
    }


{-| Type for the Projects\_insert\_input input object.
-}
type alias Projects_insert_input =
    { id : OptionalArgument Int
    , title : OptionalArgument String
    }


{-| Encode a Projects\_insert\_input into a value that can be used as an argument.
-}
encodeProjects_insert_input : Projects_insert_input -> Value
encodeProjects_insert_input input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "title", Encode.string |> Encode.optional input____.title ) ]


buildProjects_on_conflict :
    Projects_on_conflictRequiredFields
    -> (Projects_on_conflictOptionalFields -> Projects_on_conflictOptionalFields)
    -> Projects_on_conflict
buildProjects_on_conflict required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { where_ = Absent }
    in
    Projects_on_conflict { constraint = required____.constraint, update_columns = required____.update_columns, where_ = optionals____.where_ }


type alias Projects_on_conflictRequiredFields =
    { constraint : Hasura.Enum.Projects_constraint.Projects_constraint
    , update_columns : List Hasura.Enum.Projects_update_column.Projects_update_column
    }


type alias Projects_on_conflictOptionalFields =
    { where_ : OptionalArgument Projects_bool_exp }


{-| Type alias for the `Projects_on_conflict` attributes. Note that this type
needs to use the `Projects_on_conflict` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Projects_on_conflictRaw =
    { constraint : Hasura.Enum.Projects_constraint.Projects_constraint
    , update_columns : List Hasura.Enum.Projects_update_column.Projects_update_column
    , where_ : OptionalArgument Projects_bool_exp
    }


{-| Type for the Projects\_on\_conflict input object.
-}
type Projects_on_conflict
    = Projects_on_conflict Projects_on_conflictRaw


{-| Encode a Projects\_on\_conflict into a value that can be used as an argument.
-}
encodeProjects_on_conflict : Projects_on_conflict -> Value
encodeProjects_on_conflict (Projects_on_conflict input____) =
    Encode.maybeObject
        [ ( "constraint", Encode.enum Hasura.Enum.Projects_constraint.toString input____.constraint |> Just ), ( "update_columns", (Encode.enum Hasura.Enum.Projects_update_column.toString |> Encode.list) input____.update_columns |> Just ), ( "where", encodeProjects_bool_exp |> Encode.optional input____.where_ ) ]


buildProjects_order_by :
    (Projects_order_byOptionalFields -> Projects_order_byOptionalFields)
    -> Projects_order_by
buildProjects_order_by fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, title = Absent }
    in
    { id = optionals____.id, title = optionals____.title }


type alias Projects_order_byOptionalFields =
    { id : OptionalArgument Hasura.Enum.Order_by.Order_by
    , title : OptionalArgument Hasura.Enum.Order_by.Order_by
    }


{-| Type for the Projects\_order\_by input object.
-}
type alias Projects_order_by =
    { id : OptionalArgument Hasura.Enum.Order_by.Order_by
    , title : OptionalArgument Hasura.Enum.Order_by.Order_by
    }


{-| Encode a Projects\_order\_by into a value that can be used as an argument.
-}
encodeProjects_order_by : Projects_order_by -> Value
encodeProjects_order_by input____ =
    Encode.maybeObject
        [ ( "id", Encode.enum Hasura.Enum.Order_by.toString |> Encode.optional input____.id ), ( "title", Encode.enum Hasura.Enum.Order_by.toString |> Encode.optional input____.title ) ]


buildProjects_pk_columns_input :
    Projects_pk_columns_inputRequiredFields
    -> Projects_pk_columns_input
buildProjects_pk_columns_input required____ =
    { id = required____.id }


type alias Projects_pk_columns_inputRequiredFields =
    { id : Int }


{-| Type for the Projects\_pk\_columns\_input input object.
-}
type alias Projects_pk_columns_input =
    { id : Int }


{-| Encode a Projects\_pk\_columns\_input into a value that can be used as an argument.
-}
encodeProjects_pk_columns_input : Projects_pk_columns_input -> Value
encodeProjects_pk_columns_input input____ =
    Encode.maybeObject
        [ ( "id", Encode.int input____.id |> Just ) ]


buildProjects_set_input :
    (Projects_set_inputOptionalFields -> Projects_set_inputOptionalFields)
    -> Projects_set_input
buildProjects_set_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, title = Absent }
    in
    { id = optionals____.id, title = optionals____.title }


type alias Projects_set_inputOptionalFields =
    { id : OptionalArgument Int
    , title : OptionalArgument String
    }


{-| Type for the Projects\_set\_input input object.
-}
type alias Projects_set_input =
    { id : OptionalArgument Int
    , title : OptionalArgument String
    }


{-| Encode a Projects\_set\_input into a value that can be used as an argument.
-}
encodeProjects_set_input : Projects_set_input -> Value
encodeProjects_set_input input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "title", Encode.string |> Encode.optional input____.title ) ]


buildProjects_stream_cursor_input :
    Projects_stream_cursor_inputRequiredFields
    -> (Projects_stream_cursor_inputOptionalFields -> Projects_stream_cursor_inputOptionalFields)
    -> Projects_stream_cursor_input
buildProjects_stream_cursor_input required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ordering = Absent }
    in
    { initial_value = required____.initial_value, ordering = optionals____.ordering }


type alias Projects_stream_cursor_inputRequiredFields =
    { initial_value : Projects_stream_cursor_value_input }


type alias Projects_stream_cursor_inputOptionalFields =
    { ordering : OptionalArgument Hasura.Enum.Cursor_ordering.Cursor_ordering }


{-| Type for the Projects\_stream\_cursor\_input input object.
-}
type alias Projects_stream_cursor_input =
    { initial_value : Projects_stream_cursor_value_input
    , ordering : OptionalArgument Hasura.Enum.Cursor_ordering.Cursor_ordering
    }


{-| Encode a Projects\_stream\_cursor\_input into a value that can be used as an argument.
-}
encodeProjects_stream_cursor_input : Projects_stream_cursor_input -> Value
encodeProjects_stream_cursor_input input____ =
    Encode.maybeObject
        [ ( "initial_value", encodeProjects_stream_cursor_value_input input____.initial_value |> Just ), ( "ordering", Encode.enum Hasura.Enum.Cursor_ordering.toString |> Encode.optional input____.ordering ) ]


buildProjects_stream_cursor_value_input :
    (Projects_stream_cursor_value_inputOptionalFields -> Projects_stream_cursor_value_inputOptionalFields)
    -> Projects_stream_cursor_value_input
buildProjects_stream_cursor_value_input fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, title = Absent }
    in
    { id = optionals____.id, title = optionals____.title }


type alias Projects_stream_cursor_value_inputOptionalFields =
    { id : OptionalArgument Int
    , title : OptionalArgument String
    }


{-| Type for the Projects\_stream\_cursor\_value\_input input object.
-}
type alias Projects_stream_cursor_value_input =
    { id : OptionalArgument Int
    , title : OptionalArgument String
    }


{-| Encode a Projects\_stream\_cursor\_value\_input into a value that can be used as an argument.
-}
encodeProjects_stream_cursor_value_input : Projects_stream_cursor_value_input -> Value
encodeProjects_stream_cursor_value_input input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "title", Encode.string |> Encode.optional input____.title ) ]


buildProjects_updates :
    Projects_updatesRequiredFields
    -> (Projects_updatesOptionalFields -> Projects_updatesOptionalFields)
    -> Projects_updates
buildProjects_updates required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { inc_ = Absent, set_ = Absent }
    in
    Projects_updates { inc_ = optionals____.inc_, set_ = optionals____.set_, where_ = required____.where_ }


type alias Projects_updatesRequiredFields =
    { where_ : Projects_bool_exp }


type alias Projects_updatesOptionalFields =
    { inc_ : OptionalArgument Projects_inc_input
    , set_ : OptionalArgument Projects_set_input
    }


{-| Type alias for the `Projects_updates` attributes. Note that this type
needs to use the `Projects_updates` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias Projects_updatesRaw =
    { inc_ : OptionalArgument Projects_inc_input
    , set_ : OptionalArgument Projects_set_input
    , where_ : Projects_bool_exp
    }


{-| Type for the Projects\_updates input object.
-}
type Projects_updates
    = Projects_updates Projects_updatesRaw


{-| Encode a Projects\_updates into a value that can be used as an argument.
-}
encodeProjects_updates : Projects_updates -> Value
encodeProjects_updates (Projects_updates input____) =
    Encode.maybeObject
        [ ( "_inc", encodeProjects_inc_input |> Encode.optional input____.inc_ ), ( "_set", encodeProjects_set_input |> Encode.optional input____.set_ ), ( "where", encodeProjects_bool_exp input____.where_ |> Just ) ]


buildString_comparison_exp :
    (String_comparison_expOptionalFields -> String_comparison_expOptionalFields)
    -> String_comparison_exp
buildString_comparison_exp fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { eq_ = Absent, gt_ = Absent, gte_ = Absent, ilike_ = Absent, in_ = Absent, iregex_ = Absent, is_null_ = Absent, like_ = Absent, lt_ = Absent, lte_ = Absent, neq_ = Absent, nilike_ = Absent, nin_ = Absent, niregex_ = Absent, nlike_ = Absent, nregex_ = Absent, nsimilar_ = Absent, regex_ = Absent, similar_ = Absent }
    in
    { eq_ = optionals____.eq_, gt_ = optionals____.gt_, gte_ = optionals____.gte_, ilike_ = optionals____.ilike_, in_ = optionals____.in_, iregex_ = optionals____.iregex_, is_null_ = optionals____.is_null_, like_ = optionals____.like_, lt_ = optionals____.lt_, lte_ = optionals____.lte_, neq_ = optionals____.neq_, nilike_ = optionals____.nilike_, nin_ = optionals____.nin_, niregex_ = optionals____.niregex_, nlike_ = optionals____.nlike_, nregex_ = optionals____.nregex_, nsimilar_ = optionals____.nsimilar_, regex_ = optionals____.regex_, similar_ = optionals____.similar_ }


type alias String_comparison_expOptionalFields =
    { eq_ : OptionalArgument String
    , gt_ : OptionalArgument String
    , gte_ : OptionalArgument String
    , ilike_ : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , iregex_ : OptionalArgument String
    , is_null_ : OptionalArgument Bool
    , like_ : OptionalArgument String
    , lt_ : OptionalArgument String
    , lte_ : OptionalArgument String
    , neq_ : OptionalArgument String
    , nilike_ : OptionalArgument String
    , nin_ : OptionalArgument (List String)
    , niregex_ : OptionalArgument String
    , nlike_ : OptionalArgument String
    , nregex_ : OptionalArgument String
    , nsimilar_ : OptionalArgument String
    , regex_ : OptionalArgument String
    , similar_ : OptionalArgument String
    }


{-| Type for the String\_comparison\_exp input object.
-}
type alias String_comparison_exp =
    { eq_ : OptionalArgument String
    , gt_ : OptionalArgument String
    , gte_ : OptionalArgument String
    , ilike_ : OptionalArgument String
    , in_ : OptionalArgument (List String)
    , iregex_ : OptionalArgument String
    , is_null_ : OptionalArgument Bool
    , like_ : OptionalArgument String
    , lt_ : OptionalArgument String
    , lte_ : OptionalArgument String
    , neq_ : OptionalArgument String
    , nilike_ : OptionalArgument String
    , nin_ : OptionalArgument (List String)
    , niregex_ : OptionalArgument String
    , nlike_ : OptionalArgument String
    , nregex_ : OptionalArgument String
    , nsimilar_ : OptionalArgument String
    , regex_ : OptionalArgument String
    , similar_ : OptionalArgument String
    }


{-| Encode a String\_comparison\_exp into a value that can be used as an argument.
-}
encodeString_comparison_exp : String_comparison_exp -> Value
encodeString_comparison_exp input____ =
    Encode.maybeObject
        [ ( "_eq", Encode.string |> Encode.optional input____.eq_ ), ( "_gt", Encode.string |> Encode.optional input____.gt_ ), ( "_gte", Encode.string |> Encode.optional input____.gte_ ), ( "_ilike", Encode.string |> Encode.optional input____.ilike_ ), ( "_in", (Encode.string |> Encode.list) |> Encode.optional input____.in_ ), ( "_iregex", Encode.string |> Encode.optional input____.iregex_ ), ( "_is_null", Encode.bool |> Encode.optional input____.is_null_ ), ( "_like", Encode.string |> Encode.optional input____.like_ ), ( "_lt", Encode.string |> Encode.optional input____.lt_ ), ( "_lte", Encode.string |> Encode.optional input____.lte_ ), ( "_neq", Encode.string |> Encode.optional input____.neq_ ), ( "_nilike", Encode.string |> Encode.optional input____.nilike_ ), ( "_nin", (Encode.string |> Encode.list) |> Encode.optional input____.nin_ ), ( "_niregex", Encode.string |> Encode.optional input____.niregex_ ), ( "_nlike", Encode.string |> Encode.optional input____.nlike_ ), ( "_nregex", Encode.string |> Encode.optional input____.nregex_ ), ( "_nsimilar", Encode.string |> Encode.optional input____.nsimilar_ ), ( "_regex", Encode.string |> Encode.optional input____.regex_ ), ( "_similar", Encode.string |> Encode.optional input____.similar_ ) ]
